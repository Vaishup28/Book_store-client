{"ast":null,"code":"const router = require('express').Router();\nconst bcrypt = require('bcryptjs');\nconst jwt = require('jsonwebtoken');\nconst User = require('../Models/User.js');\n\n// SIGNUP Route\nrouter.post('/signup', async (req, res) => {\n  try {\n    const {\n      name,\n      email,\n      password\n    } = req.body;\n    const existing = await User.findOne({\n      email\n    });\n    if (existing) return res.status(400).send('Email already in use');\n    const hash = await bcrypt.hash(password, 10);\n    const user = new User({\n      name,\n      email,\n      password: hash\n    });\n    await user.save();\n    const token = jwt.sign({\n      id: user._id\n    }, process.env.JWT_SECRET, {\n      expiresIn: '1d'\n    });\n    res.status(201).json({\n      token,\n      user: {\n        id: user._id,\n        name: user.name,\n        email: user.email\n      }\n    });\n  } catch (err) {\n    res.status(500).send('Server error');\n  }\n});\nmodule.exports = router;","map":{"version":3,"names":["router","require","Router","bcrypt","jwt","User","post","req","res","name","email","password","body","existing","findOne","status","send","hash","user","save","token","sign","id","_id","process","env","JWT_SECRET","expiresIn","json","err","module","exports"],"sources":["C:/MERN Stack/Mern-project/Phase-5/client/src/Pages/Signup.jsx"],"sourcesContent":["const router = require('express').Router();\nconst bcrypt = require('bcryptjs');\nconst jwt = require('jsonwebtoken');\nconst User = require('../Models/User.js');\n\n// SIGNUP Route\nrouter.post('/signup', async (req, res) => {\n  try {\n    const { name, email, password } = req.body;\n\n    const existing = await User.findOne({ email });\n    if (existing) return res.status(400).send('Email already in use');\n\n    const hash = await bcrypt.hash(password, 10);\n    const user = new User({ name, email, password: hash });\n    await user.save();\n\n    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '1d' });\n\n    res.status(201).json({\n      token,\n      user: {\n        id: user._id,\n        name: user.name,\n        email: user.email,\n      },\n    });\n  } catch (err) {\n    res.status(500).send('Server error');\n  }\n});\n\nmodule.exports = router;\n"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,SAAS,CAAC,CAACC,MAAM,CAAC,CAAC;AAC1C,MAAMC,MAAM,GAAGF,OAAO,CAAC,UAAU,CAAC;AAClC,MAAMG,GAAG,GAAGH,OAAO,CAAC,cAAc,CAAC;AACnC,MAAMI,IAAI,GAAGJ,OAAO,CAAC,mBAAmB,CAAC;;AAEzC;AACAD,MAAM,CAACM,IAAI,CAAC,SAAS,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACzC,IAAI;IACF,MAAM;MAAEC,IAAI;MAAEC,KAAK;MAAEC;IAAS,CAAC,GAAGJ,GAAG,CAACK,IAAI;IAE1C,MAAMC,QAAQ,GAAG,MAAMR,IAAI,CAACS,OAAO,CAAC;MAAEJ;IAAM,CAAC,CAAC;IAC9C,IAAIG,QAAQ,EAAE,OAAOL,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,sBAAsB,CAAC;IAEjE,MAAMC,IAAI,GAAG,MAAMd,MAAM,CAACc,IAAI,CAACN,QAAQ,EAAE,EAAE,CAAC;IAC5C,MAAMO,IAAI,GAAG,IAAIb,IAAI,CAAC;MAAEI,IAAI;MAAEC,KAAK;MAAEC,QAAQ,EAAEM;IAAK,CAAC,CAAC;IACtD,MAAMC,IAAI,CAACC,IAAI,CAAC,CAAC;IAEjB,MAAMC,KAAK,GAAGhB,GAAG,CAACiB,IAAI,CAAC;MAAEC,EAAE,EAAEJ,IAAI,CAACK;IAAI,CAAC,EAAEC,OAAO,CAACC,GAAG,CAACC,UAAU,EAAE;MAAEC,SAAS,EAAE;IAAK,CAAC,CAAC;IAErFnB,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACa,IAAI,CAAC;MACnBR,KAAK;MACLF,IAAI,EAAE;QACJI,EAAE,EAAEJ,IAAI,CAACK,GAAG;QACZd,IAAI,EAAES,IAAI,CAACT,IAAI;QACfC,KAAK,EAAEQ,IAAI,CAACR;MACd;IACF,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOmB,GAAG,EAAE;IACZrB,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,cAAc,CAAC;EACtC;AACF,CAAC,CAAC;AAEFc,MAAM,CAACC,OAAO,GAAG/B,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}